<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="normalMapper.AccessTokenMapper" >
  <resultMap id="BaseResultMap" type="normalPo.AccessToken" >
    <id column="access_token" property="accessToken" jdbcType="VARCHAR" />
    <id column="US_ID" property="usId" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="EXPIRE_TS" property="expireTs" jdbcType="TIMESTAMP" />
    <result column="LT_REQ_TS" property="ltReqTs" jdbcType="TIMESTAMP" />
    <result column="REG_DC" property="regDc" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    access_token, US_ID, CREATE_TIME, EXPIRE_TS, LT_REQ_TS, REG_DC
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="normalPo.AccessTokenExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from access_token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="map" >
    select 
    <include refid="Base_Column_List" />
    from access_token
    where access_token = #{accessToken,jdbcType=VARCHAR}
      and US_ID = #{usId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map" >
    delete from access_token
    where access_token = #{accessToken,jdbcType=VARCHAR}
      and US_ID = #{usId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="normalPo.AccessTokenExample" >
    delete from access_token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="normalPo.AccessToken" >
    insert into access_token (access_token, US_ID, CREATE_TIME, 
      EXPIRE_TS, LT_REQ_TS, REG_DC
      )
    values (#{accessToken,jdbcType=VARCHAR}, #{usId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{expireTs,jdbcType=TIMESTAMP}, #{ltReqTs,jdbcType=TIMESTAMP}, #{regDc,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="normalPo.AccessToken" >
    insert into access_token
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="accessToken != null" >
        access_token,
      </if>
      <if test="usId != null" >
        US_ID,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="expireTs != null" >
        EXPIRE_TS,
      </if>
      <if test="ltReqTs != null" >
        LT_REQ_TS,
      </if>
      <if test="regDc != null" >
        REG_DC,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="accessToken != null" >
        #{accessToken,jdbcType=VARCHAR},
      </if>
      <if test="usId != null" >
        #{usId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expireTs != null" >
        #{expireTs,jdbcType=TIMESTAMP},
      </if>
      <if test="ltReqTs != null" >
        #{ltReqTs,jdbcType=TIMESTAMP},
      </if>
      <if test="regDc != null" >
        #{regDc,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="normalPo.AccessTokenExample" resultType="java.lang.Integer" >
    select count(*) from access_token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update access_token
    <set >
      <if test="record.accessToken != null" >
        access_token = #{record.accessToken,jdbcType=VARCHAR},
      </if>
      <if test="record.usId != null" >
        US_ID = #{record.usId,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.expireTs != null" >
        EXPIRE_TS = #{record.expireTs,jdbcType=TIMESTAMP},
      </if>
      <if test="record.ltReqTs != null" >
        LT_REQ_TS = #{record.ltReqTs,jdbcType=TIMESTAMP},
      </if>
      <if test="record.regDc != null" >
        REG_DC = #{record.regDc,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update access_token
    set access_token = #{record.accessToken,jdbcType=VARCHAR},
      US_ID = #{record.usId,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      EXPIRE_TS = #{record.expireTs,jdbcType=TIMESTAMP},
      LT_REQ_TS = #{record.ltReqTs,jdbcType=TIMESTAMP},
      REG_DC = #{record.regDc,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="normalPo.AccessToken" >
    update access_token
    <set >
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expireTs != null" >
        EXPIRE_TS = #{expireTs,jdbcType=TIMESTAMP},
      </if>
      <if test="ltReqTs != null" >
        LT_REQ_TS = #{ltReqTs,jdbcType=TIMESTAMP},
      </if>
      <if test="regDc != null" >
        REG_DC = #{regDc,jdbcType=VARCHAR},
      </if>
    </set>
    where access_token = #{accessToken,jdbcType=VARCHAR}
      and US_ID = #{usId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="normalPo.AccessToken" >
    update access_token
    set CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      EXPIRE_TS = #{expireTs,jdbcType=TIMESTAMP},
      LT_REQ_TS = #{ltReqTs,jdbcType=TIMESTAMP},
      REG_DC = #{regDc,jdbcType=VARCHAR}
    where access_token = #{accessToken,jdbcType=VARCHAR}
      and US_ID = #{usId,jdbcType=VARCHAR}
  </update>
</mapper>